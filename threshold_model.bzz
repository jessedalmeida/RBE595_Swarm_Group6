
#
# Executed once at init time
#
function init() {
  reset()
}


# number of robots within a distance of X cm
robots_in_dist = 0
P = 0.01
count = 0

#
# Executed for each step
#
function step() {

  # obst is the average distance away from the robot all the other robots are
  obst = reduce(proximity, # This is pythons reudce() function. Takes in list, funciton, initializer, and applies the function to every item in the list.
		function(idx,sensor,sofar) { # Inline function to be applied to every sensor in the proximity sensor list
			return { # sum up the proximity sensor x and y value based on their orientatino around hte robot
				.x = sofar.x + sensor.value * math.cos(sensor.angle),
				.y = sofar.y + sensor.value * math.sin(sensor.angle)
			}}, 
      { .x = 0.0, .y = 0.0 }) # initial value to assign to sofar variable
  if(neighbors.count() > 0) { # Taking the average value of the summed up x and y distances to get the average
    obst.x = obst.x / neighbors.count()
    obst.y = obst.y / neighbors.count()
  }
  # Where does the neighbors variable come from????

  num_neighbors = neighbors.reduce( function(rid,data,accum) {
      accum = accum + 1
      return accum
    },
    0)

  length = math.sqrt(obst.x*obst.x + obst.y*obst.y)

	threshold = 0.005

  # Draw the vector
	# See: https://the.swarming.buzz/wiki/doku.php?id=buzz_argos
	# debug.rays.add(
	# 	255, 0, 0,
	# 	0.0, 0.0, 0.1,
	# 	obst.x, obst.y, 0.1)
  
  Pstop = P + robots_in_dist/6

  rand = math.rng.uniform(1.0)

  if (rand < Pstop) {
    gotoc(0.0, 0.0)
    count = 10
  }
  else if (count < 0){
    if (length > threshold){
        gotoc(-obst.x*100.0, -obst.y*100.0)
    } else {
        gotoc(10.0, 0.0)
    }
  }
  else {
    count = count - 1
  }

  debug_output()
}

#
# Executed once upon resetting
#
function reset() {
  # Pick a default task
	math.rng.setseed(id)
	num_neighbors = 0
	# Draw the trajectory of the robot in green
	# See: https://the.swarming.buzz/wiki/doku.php?id=buzz_argos
  # debug.trajectory.enable(100, 0, 255, 0)

  # Debug output
  debug_output()
}

#
# Executed once upon closing ARGoS
#
function destroy() {
  # Nothing to do
}

#
# Helper function
#
function debug_output() {
  # Examples of possible debug output
  
  # Debug message written on top of robot
  # See: https://the.swarming.buzz/wiki/doku.php?id=buzz_argos
  # Debug message written in the log

	debug.print("Num+neighbors=", num_neighbors)
  # log("R", id, ": t=", task, "; th0=", threshold[0], "; th1=", threshold[1])
}
